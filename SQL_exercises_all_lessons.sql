#####################################################
####### FULL PACK EXERCISES - SAKILA DATABASE #######
#####################################################

### LOAD Sakila
USE sakila;

##############################
# SECTION 1. BASIC QUERIES:
##############################

# 1. Retrieve the 10 longest films.
SELECT title, length FROM film
ORDER BY length DESC
LIMIT 10;

# 2. Retrieve all actors with the first name "SCARLETT".
SELECT actor_id, first_name, last_name FROM actor
WHERE first_name = 'SCARLETT';

# 3. Retrieve all movies that have ARMAGEDDON in their title and have a duration longer than 
# 100 minutes.
SELECT title, length FROM film
WHERE title LIKE '%ARMAGEDDON%' AND length > 100;

# 4. Determine the number of films that include Behind the Scenes content
SELECT COUNT(*) AS number_films FROM film
WHERE special_features LIKE '%Behind the Scenes%';

##############################
# SECTION 2. AGGREGATION AND TRANSFORMATION:
##############################

# 5. Determine the shortest and longest movie durations and name the values as max_duration and min_duration.
SELECT MAX(length) AS max_duration, MIN(length) AS min_duration FROM film;

# 6. Express the average movie duration in hours and minutes. Don't use decimals.
SELECT CONCAT(FLOOR(AVG(length)/60), ' hours ',
			  ROUND(AVG(length)%60), ' minutes') AS average_time
FROM film;

# 7. Calculate the number of days that the company has been operating.
SELECT DATEDIFF(MAX(rental_date), MIN(rental_date)) AS days
FROM rental;

# 8. Retrieve rental information and add two additional columns to show the month and weekday of the rental. Return 20 rows of results.
SELECT *, MONTH(rental_date) AS month, DAYNAME(rental_date) AS day_of_week
FROM rental
LIMIT 20;

# 9. Retrieve rental information and add an additional column called DAY_TYPE with values 
# 'weekend' or 'workday', depending on the day of the week.
SELECT *,
		CASE 
			WHEN dayofweek(rental_date) in (1,7) THEN 'weekend'
            ELSE 'daywork'
		END AS day_type
FROM rental;

# 10. You need to ensure that customers can easily access information about the movie collection. To achieve this, retrieve the film titles and their rental duration. If any rental duration 
# value is NULL, replace it with the string 'Not Available'. Sort the results of the film title in ascending order.
SELECT title, ifnull(rental_duration, 'Not Available')  AS rental_duration
FROM film
ORDER BY rental_duration ASC;

# 11. Retrieve the **concatenated first and last names of customers**, along with the **first 3 characters of their email** address, so that you can address them by their first name and use their 
# email address to send personalized recommendations. The results should be ordered by last name in ascending order

SELECT CONCAT(first_name, ' ', last_name) AS customer,
	   LEFT(email,3) AS email
FROM customer
ORDER BY last_name ASC;

# 12. The total number of films that have been released.
SELECT COUNT(distinct(title)) FROM film;
SELECT COUNT(*) AS total_films FROM film;

# 13. The number of films for each rating.
SELECT rating, COUNT(*) AS number_films
FROM film
GROUP BY rating;

# 14. The number of films for each rating, sorting the results in descending order of the number of films. 
SELECT rating, COUNT(*) AS number_films
FROM film
GROUP BY rating
ORDER BY number_films DESC;

# 15. The mean film duration for each rating, and sort the results in descending order of the mean duration. Round off the average lengths to two decimal places.
SELECT ROUND(AVG(length),2) AS AVG_duration, rating
FROM film
GROUP BY rating
ORDER BY AVG_duration DESC;

# 16. Identify which ratings have a mean duration of over two hours in order to help select films for customers who prefer longer movies.
SELECT rating, duration
    FROM (SELECT AVG(length) AS duration, rating
	FROM film
	GROUP BY rating) AS rating_duration
WHERE duration > 120;


# 17. Determine which last names are not repeated in the table actor.
SELECT last_name
FROM actor
GROUP BY last_name
HAVING COUNT(*) = 1;

##############################
# SECTION 3. JOINS
##############################

# 18. List the number of films per category.
SELECT category.name AS category, COUNT(*) AS number_films
FROM category
JOIN film_category ON category.category_id = film_category.category_id
JOIN film ON film_category.film_id = film.film_id
GROUP BY category
ORDER BY number_films DESC;

# 19. Retrieve the store ID, city, and country for each store.
SELECT store_id, city, country
FROM store
JOIN address ON address.address_id = store.address_id
JOIN city ON city.city_id = address.city_id
JOIN country ON country.country_id = city.country_id;

# 20. Calculate the total revenue generated by each store in dollars.
SELECT store_id, SUM(amount) AS total_revenue
FROM payment
JOIN staff ON payment.staff_id = staff.staff_id
GROUP BY store_id;

# 21. Determine the average running time of films for each category.
SELECT name AS category, AVG(length) AS duration
FROM category
JOIN film_category ON film_category.category_id = category.category_id
JOIN film ON film_category.film_id = film.film_id
GROUP BY category
ORDER BY duration DESC;

# 22. Identify the film categories with the longest average running time.
SELECT name AS category, AVG(length) AS duration
FROM category
JOIN film_category ON film_category.category_id = category.category_id
JOIN film ON film_category.film_id = film.film_id
GROUP BY category
ORDER BY duration DESC
LIMIT 1;

# 23. Display the top 10 most frequently rented movies in descending order.
SELECT title AS movie, COUNT(*) AS times_rented
FROM film
JOIN inventory ON inventory.film_id = film.film_id
JOIN rental ON rental.inventory_id = inventory.inventory_id
GROUP BY movie
ORDER BY times_rented DESC
LIMIT 10;

# 24. Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT title, store_id
FROM film
JOIN inventory ON inventory.film_id = film.film_id
WHERE title LIKE 'Academy Dinosaur';

SELECT title, store_id
FROM film
JOIN inventory ON inventory.film_id = film.film_id
WHERE title = 'Academy Dinosaur'
GROUP BY store_id;

# 25. Provide a list of all distinct film titles, along with their availability status in the inventory.
SELECT title,
			CASE
				WHEN IFNULL(COUNT(inventory.inventory_id), 0) > 0 THEN 'available'
                ELSE 'not available'
            END AS availability
FROM film
JOIN inventory ON inventory.film_id = film.film_id
GROUP BY title;

##############################
# SECTION 4. SUBQUERIES
##############################

# 26. Determine the number of copies of the film "Hunchback Impossible" that exist in the inventory system.
SELECT title, COUNT(*) AS number_copies
FROM film
JOIN inventory ON inventory.film_id = film.film_id
WHERE title = 'Hunchback Impossible';

SELECT COUNT(*) AS number_copies
FROM inventory
WHERE film_id = (SELECT film_id FROM film WHERE title = 'Hunchback Impossible');

# 27. List all films whose length is longer than the average length of all the films in the Sakila database.
SELECT title, length
FROM film
WHERE length > (SELECT(AVG(length))FROM film)
ORDER BY length DESC;

# 28. Use a subquery to display all actors who appear in the film "Alone Trip".
SELECT CONCAT(first_name, ' ', last_name) AS actor_name
FROM actor
WHERE actor_id IN (SELECT actor_id FROM film_actor 
			      JOIN film ON film.film_id = film_actor.film_id
                  WHERE title = 'Alone Trip'); 
                  
SELECT CONCAT(first_name, ' ', last_name) AS actor_names
FROM actor
JOIN film_actor ON actor.actor_id = film_actor.actor_id
WHERE film_actor.film_id = (SELECT film_id FROM film WHERE title = 'Alone Trip');

# 29. Sales have been lagging among young families, and you want to target family movies for a promotion. Identify all movies categorized as family films.
SELECT title 
FROM film
WHERE film_id IN (SELECT film_id FROM film_category
				  JOIN category ON category.category_id = film_category.category_id
                  WHERE name = 'Family');

SELECT title
FROM film
JOIN film_category ON film.film_id = film_category.film_id
JOIN category ON film_category.category_id = category.category_id
WHERE category.name = 'Family';
                  
# 30. Retrieve the name and email of customers from Canada using both subqueries and joins. To use joins, you will need to identify the relevant tables and their primary and foreign keys.
SELECT first_name, email
FROM customer
JOIN address ON address.address_id = customer.address_id
WHERE city_id IN (SELECT city_id FROM city
				 JOIN country ON country.country_id = city.country_id
                 WHERE country = 'Canada');

SELECT first_name, email
FROM customer
JOIN address ON address.address_id = customer.address_id
JOIN city ON city.city_id = address.city_id
WHERE country_id = (SELECT country_id FROM country
					WHERE country = 'Canada');
                    
SELECT first_name, email
FROM customer
JOIN address ON customer.address_id = address.address_id
JOIN city ON address.city_id = city.city_id
JOIN country ON city.country_id = country.country_id
WHERE country = 'Canada';

# 31. Determine which films were starred by the most prolific actor in the Sakila database. A prolific actor is defined as the actor who has acted in the most number of films. 
SELECT actor_id, COUNT(*) AS count_films
FROM film_actor
GROUP BY actor_id
ORDER BY count_films DESC
LIMIT 1;

SELECT title
FROM film
JOIN film_actor ON film_actor.film_id = film.film_id
WHERE actor_id LIKE (SELECT actor_id
					FROM film_actor
					GROUP BY actor_id
					ORDER BY COUNT(*) DESC
					LIMIT 1);

# 32. Find the films rented by the most profitable customer in the Sakila database. You can use the customer and payment tables to find the most profitable customer, i.e., the customer who has made the largest sum of payments.
SELECT customer_id, SUM(amount) AS total_amount
FROM payment
GROUP BY customer_id
ORDER BY total_amount DESC
LIMIT 1;

SELECT title
FROM film
WHERE film_id IN (SELECT film_id
				 FROM inventory
                 JOIN rental ON rental.inventory_id = inventory.inventory_id
                 WHERE customer_id = (SELECT customer_id
									  FROM payment
                                      GROUP BY customer_id
                                      ORDER BY SUM(amount)
                                      LIMIT 1));

# 33. Retrieve the client_id and the total_amount_spent of those clients who spent more than the average of the total_amount spent by each client. You can use subqueries to accomplish this.
SELECT customer_id, total_amount
FROM (SELECT customer_id, SUM(amount) AS total_amount
	  FROM payment
      GROUP BY customer_id) AS customer_payments
WHERE total_amount > (SELECT AVG(total_amount)
					  FROM (SELECT customer_id, SUM(amount) AS total_amount
							FROM payment
                            GROUP BY customer_id) AS AVG_customer);

##############################
# SECTION 5. TABLES, VIEWS, CTEs
##############################

# 34: Create a view with customer's ID, name, email address, and total number of rentals:
CREATE VIEW view_step1 AS (SELECT customer.customer_id, CONCAT(first_name, ' ', last_name) AS name, email, COUNT(*) AS total_rentals
						   FROM customer
                           JOIN rental ON rental.customer_id = customer.customer_id
                           GROUP BY customer_id
                           ORDER BY total_rentals);
SELECT * FROM view_step1;
DROP VIEW view_step1;

# 35: create a temporary table to calculate total amount paid by each customer.
CREATE TEMPORARY TABLE temp_table_step2 AS (SELECT customer.customer_id, SUM(amount) AS total_amount
						   FROM customer
                           JOIN payment ON payment.customer_id = customer.customer_id
                           GROUP BY customer_id
                           ORDER BY total_amount DESC);
SELECT * FROM temp_table_step2;
DROP TEMPORARY TABLE temp_table_step2;

# 36: Create a Common Table Expression (CTE). Join the View and Temporary Table above. 
# CTE should include customer's name, email address, rental count, and total amount paid.
WITH customer_summary AS (SELECT name, email, total_rentals, total_amount
						   FROM view_step1
                           JOIN temp_table_step2 ON temp_table_step2.customer_id = view_step1.customer_id)
SELECT *, total_amount/total_rentals AS average_payment_per_rental 
FROM customer_summary;











